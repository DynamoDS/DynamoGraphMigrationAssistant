<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="CancelButtonText" xml:space="preserve">
    <value>Stop</value>
  </data>
  <assembly alias="System.Windows.Forms" name="System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
  <data name="checkmark" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>..\Resources\checkmark.png;System.Drawing.Bitmap, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</value>
  </data>
  <data name="DynamoVersionsMsg" xml:space="preserve">
    <value>Target Dynamo Version:</value>
  </data>
  <data name="DynamoVersionsTooltip" xml:space="preserve">
    <value>Graphs in the source folder will be migrated to the selected target version. Graphs already in the target version will be copied with no changes.</value>
  </data>
  <data name="ExportButtonText" xml:space="preserve">
    <value>Export</value>
  </data>
  <data name="ExtensionName" xml:space="preserve">
    <value>Dynamo Graph Migration Assistant</value>
  </data>
  <data name="FileCopiedLogMessage" xml:space="preserve">
    <value>{0} was in target Dynamo version and copied to output folder with no changes.</value>
  </data>
  <data name="FinishMsg" xml:space="preserve">
    <value>Successfully migrated {0} graphs</value>
  </data>
  <data name="FinishMsgTitle" xml:space="preserve">
    <value>Migration finished.</value>
  </data>
  <data name="FinishSingleMsg" xml:space="preserve">
    <value>Successfully exported {0} image.</value>
  </data>
  <data name="FixInputLinebreaksCheckboxMsg" xml:space="preserve">
    <value>Swap Line Breaks to Pinned Notes</value>
  </data>
  <data name="FixInputLinebreaksCheckboxTooltip" xml:space="preserve">
    <value>If a node name includes a line break, this option will separate text before the line break into a pinned note.</value>
  </data>
  <data name="FixInputOrderCheckboxMsg" xml:space="preserve">
    <value>Force input order</value>
  </data>
  <data name="FixInputOrderCheckboxTooltip" xml:space="preserve">
    <value>Appends a prefix (001|, 002|…) to the names of nodes marked as input. Ordering begins with nodes closest to the top of the workspace.</value>
  </data>
  <data name="FixNodeSpacingCheckboxMsg" xml:space="preserve">
    <value>Cleanup node layout</value>
  </data>
  <data name="FixNodeSpacingTooltip" xml:space="preserve">
    <value>Adjust node spacing to avoid overlapping nodes.</value>
  </data>
  <data name="GraphsInTargetVersionMsg" xml:space="preserve">
    <value>Graphs in Target Version</value>
  </data>
  <data name="GraphsSelectedText" xml:space="preserve">
    <value>graphs selected for update.</value>
  </data>
  <data name="HeaderText" xml:space="preserve">
    <value>Dynamo Graph Migration Assistant</value>
  </data>
  <data name="IfNodeReplacementLogMessage" xml:space="preserve">
    <value>{0} if nodes migrated to refactored if.</value>
  </data>
  <data name="KeepFolderStructureCheckboxMsg" xml:space="preserve">
    <value>Keep folder structure</value>
  </data>
  <data name="KeepFolderStructureTooltip" xml:space="preserve">
    <value>Retains the folder/subfolder structure from the source folder.</value>
  </data>
  <data name="MigrateGraphMsg" xml:space="preserve">
    <value>Graphs to Migrate</value>
  </data>
  <data name="MiscSettingsMsg" xml:space="preserve">
    <value>General Settings</value>
  </data>
  <data name="NodesMovedLogMessage" xml:space="preserve">
    <value>{0} nodes and notes moved to prevent overlap.</value>
  </data>
  <data name="NotificationMsg" xml:space="preserve">
    <value>The source folder contains {0} Dynamo graphs.</value>
  </data>
  <data name="OptionalFixesMsg" xml:space="preserve">
    <value>Optional Graph Updates</value>
  </data>
  <data name="OptionalFixesTooltip" xml:space="preserve">
    <value>These migrations tasks are optional as they are more user-specific.</value>
  </data>
  <data name="OverviewMsg" xml:space="preserve">
    <value>Use this tool to migrate Dynamo graphs from pre-2.13 versions to 2.13+ versions.</value>
  </data>
  <data name="ProcessMsg" xml:space="preserve">
    <value>Processed {0} out of {1} graphs.</value>
  </data>
  <data name="Progress_circle" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>..\Resources\Progress circle.png;System.Drawing.Bitmap, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</value>
  </data>
  <data name="ReplaceIfNodesCheckboxMsg" xml:space="preserve">
    <value>Update If nodes</value>
  </data>
  <data name="ReplaceIfNodesCheckboxTooltip" xml:space="preserve">
    <value>Replaces outdated If nodes with updated If nodes.</value>
  </data>
  <data name="ResumeCheckboxMsg" xml:space="preserve">
    <value>Resume previous session</value>
  </data>
  <data name="ResumeTooltip" xml:space="preserve">
    <value>Attempts to resume progress from a previous run. Progress is stored within the log.txt file in the root target folder.</value>
  </data>
  <data name="SelectFolderMsg" xml:space="preserve">
    <value>Select folder ..</value>
  </data>
  <data name="SingleExportCheckboxMsg" xml:space="preserve">
    <value>Export current graph.</value>
  </data>
  <data name="SingleExportTooltip" xml:space="preserve">
    <value>Allows the migration of the current graph.</value>
  </data>
  <data name="SourceFolderMsg" xml:space="preserve">
    <value>Source folder</value>
  </data>
  <data name="SuggestedFixesMsg" xml:space="preserve">
    <value>Recommended Graph Updates</value>
  </data>
  <data name="SuggestedFixesTooltip" xml:space="preserve">
    <value>These updates are recommended based on the target Dynamo version to improve functionality and usability of the migrated graph(s).</value>
  </data>
  <data name="TargetFolderMsg" xml:space="preserve">
    <value>Target folder</value>
  </data>
  <data name="TrustFileLocationCheckboxMsg" xml:space="preserve">
    <value>Add source folder to trusted locations</value>
  </data>
  <data name="TrustFileLocationCheckboxTooltip" xml:space="preserve">
    <value>This location is currently not in the trusted locations. In order to run the tool, you need to add it in preferences or check this box.</value>
  </data>
  <data name="UpdatePathTooltip" xml:space="preserve">
    <value>Select folder</value>
  </data>
  <data name="ViewOutputButtonText" xml:space="preserve">
    <value>View Output</value>
  </data>
</root>